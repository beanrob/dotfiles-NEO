
"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"  \_/ |_|_| |_| |_|_|  \___|


" VUNDLE ----------------------------------------------------------------------------------- {{{
filetype off

" Set the runtime path to include Vundle and initialise
set rtp+=~/.vim/bundle/Vundle.vim

" Download plug-ins to the plugged directory
call vundle#begin('~/.vim/plugged')

" Let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'

call vundle#end()
filetype plugin indent on
" }}}

" SETTINGS --------------------------------------------------------------------------------- {{{
set encoding=UTF-8
set nocompatible 		" Use vim settings rather than vi

set t_Co=256 			" Enable 256 colours
set nu			        " Enable line numbers
syntax on       	    " Enable syntax highlights
set showmatch

set incsearch		    " Enable incremental search (search
						" updates as you change the query)
set hlsearch		    " Enable searching highlighted text
set ignorecase
set smartcase

set termwinsize=12x0	" Set terminal size (rows)
set splitbelow			" Always split windows below
set splitright			" Always split windows to the right
set mouse=a				" Enable mouse drag on window splits
set nowrap

set tabstop=4		    " How many spaces an indent is
set shiftwidth=4
set expandtab			" Use spaces when tabbing
set pastetoggle=<F3>

set scrolloff=8
set sidescrolloff=8

" Command autocompletion
set wildmenu
set wildmode=list:longest
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

"augroup dynamic_smartcase
"    autocmd!
"    autocmd CmdLineEnter : set nosmartcase
"    autocmd CmdLineLeave : set smartcase
"augroup END

" Make backspace behave normally
set backspace=indent,eol,start
set softtabstop=4

autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
autocmd BufNewFile,BufRead *.md  set tw=80
autocmd BufNewFile,BufRead *.txt set tw=80
autocmd BufNewFile,BufRead *.tex set tw=80

" List
" set list
" set listchars=
" set listchars+=tab:·\
" set listchars+=trail:·
" set listchars+=extends:»
" set listchars+=precedes:«

set showtabline=2
" }}}

" KEYBINDINGS ------------------------------------------------------------------------------ {{{

noremap U :redo<CR>
noremap Q @

" inoremap ii <Esc>
noremap <leader>t :term<CR>
noremap <leader>m :MinimapToggle<CR>

" noremap <leader>r :Ranger<CR>
" noremap <leader>f :NERDTreeToggle<CR>

noremap <leader>fm :Ranger<CR>
noremap <leader>ft :NERDTreeToggle<CR>
let NERDTreeMinimalUI=1

noremap j gj
noremap k gk

noremap <C-e> $
noremap <C-a> ^

noremap <C-t>c :tabnew<CR>
noremap <C-t>x :tabclose<CR>
noremap <C-t>n :tabnext<CR>
noremap <C-t>p :tabprevious<CR>

" tnoremap <Esc> <C-\><C-n>:q!<CR>

" use Space + n to toggle the line number counting method
function! g:ToggleNuMode()
	if &nu == 1
		set nonu   " turn off nu
		set rnu
	else
		set nornu   " turn off rnu
		set nu
	endif
endfunction
nnoremap <silent><leader>n :call g:ToggleNuMode()<CR>
" }}}

" COLOURS ---------------------------------------------------------------------------------- {{{
Plugin 'dracula/vim',{'name':'dracula'}
Plugin 'altercation/vim-colors-solarized',{'name':'solarized'}
Plugin 'bluz71/vim-moonfly-colors',{'name':'moonfly'}
Plugin 'sainnhe/everforest'
Plugin 'dylanaraps/wal.vim',{'name':'wal'}
Plugin 'morhetz/gruvbox',{'name':'gruvbox'}

let g:everforest_background = 'hard'
let g:everforest_better_performance = 1

" if has('termguicolors')
"   set termguicolors
" endif

set background=dark		" Chooses background colour
colorscheme wal

" hi Normal guibg=NONE ctermbg=NONE
" }}}


" PLUGINS ---------------------------------------------------------------------------------- {{{
" Syntax highlighting plugin
Plugin 'sheerun/vim-polyglot'

" Automatic pairs or bracets, quotes, etc.
Plugin 'jiangmiao/auto-pairs'
let g:AutoPairsShortcutToggle = '<C-P>'

" File tree plugin
Plugin 'preservim/nerdtree'
let NERDTreeShowHidden=1
" autocmd VimEnter * NERDTree | wincmd p				" Open NERDTree when opening Vim, close Vim if only Nerdtree is open
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Shows indentation levels
Plugin 'yggdroot/indentline'
let g:indentLine_setConceal = 0

" Makes filetree look cooler
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'

" Code minimap
Plugin 'severin-lemaignan/vim-minimap'

" Open Ranger with :Ranger
Plugin 'francoiscabrol/ranger.vim'

" Colorizer plugin
Plugin 'lilydjwg/colorizer'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Shows changes between local and repository
Plugin 'airblade/vim-gitgutter'

" Better comments
Plugin 'preservim/nerdcommenter'

" Zen Mode Package
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
noremap <leader>z :Goyo<CR>

" LaTeX autocompile
Plugin 'lervag/vimtex'
let g:vimtex_view_method = 'zathura'
let g:vimtex_version_check = 0
" }}}

let mapleader = " "
" RANGER ----------------------------------------------------------------------------------- {{{
let g:ranger_map_keys = 0
" }}}

" COMMENTER -------------------------------------------------------------------------------- {{{
" let g:NERDSpaceDelims = 1
let g:NERDCreateDefaulsMappings = 0
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDToggleCheckAllLines = 1
" }}}
